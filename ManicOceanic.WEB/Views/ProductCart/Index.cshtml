@using ManicOceanic.DOMAIN.Entities
@using ManicOceanic.DOMAIN.Entities.Sales
@using Microsoft.AspNet.Identity
@using Microsoft.AspNetCore.Identity
@using Microsoft.CodeAnalysis
@model IList<ManicOceanic.WEB.Models.CartItem>

@inject SignInManager<Customer> SignInManager
@inject Microsoft.AspNetCore.Identity.UserManager<Customer> UserManager

<h1 class="text-center">Shopping cart</h1><br>

<h5 class="fish-exist"></h5>

<div id="products"></div>


<div class="container">
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Unit of measure </th>
                <th>Unit Price</th>
                <th>Quantity</th>
                <th>SubTotal</th>
            </tr>
        </thead>
        <tbody id="cart-list"></tbody>
        <tfoot>
            @if (@Model != null)
            {
                var quantity = 1;
                var count = 1;
                @foreach (var product in @Model)
                {
                    <tr class="cart-item">

                        <th class="counting">@count</th>

                        <th>@product.Product.Name </th>
                        <th>@product.Product.UnitOfMeasure</th>
                        <th>@product.Product.Price</th>
                        <th class="quantity">
                            @product.Quantity
                            <input class="quantity-change" type="number" value="@product.Quantity" min="1" max="1000" data-product-Id="@product.Product.Id" data-product-Stock="@product.Product.Stock" />
                        </th>

                        <th>@(string.Format("{0:N0}", product.Product.Price * product.Quantity))</th>
                        <th>
                            @Html.ActionLink("Delete", "DeleteItem", "ProductCart", new { id = product.Product.Id },
                            new { onclick = "return confirm ('Are you sure you want to delete this item ?')" })
                        </th>

                        <th> </th>
                        <th id="total"></th>
                    </tr>
                    count++;
                }
            }
            <tr>
                @{
                    string total = "0";
                    string vat = "0";
                    if (@Model != null)
                    {
                        var temp = @Model;
                        total = string.Format("{0:N0}", temp.Sum(x => x.Quantity * x.Product.Price));
                        vat = string.Format("{0:N0}", ((25 * decimal.Parse(total)) / 100));
                    }

                }
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th>
                    VAT 25%:

                </th>
                <th id="vat">@vat Kr</th>
            </tr>
            <tr>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th>Shipping: </th>
                <th id="shipping">
                    <select id="shipping1" name="shipping1">
                        <option value="UPS">UPS</option>
                        <option value="Postnord">Postnord</option>
                        <option value="Schenker">Schenker</option>
                    </select>
                </th>
                <th></th>

            </tr>
            <tr>
                <th></th>
                <th></th>
                <th>Payment method: </th>
                <th id="payment">
                    <select id="payment1" name="payment1">
                        <option value="Klarna">Klarna</option>
                        <option value="Credit-Card">Credit Card</option>
                        <option value="PayPal">PayPal</option>
                        <option value="Invoice">Invoice</option>
                    </select>
                </th>
                <th>To pay: </th>
                <th id="to-pay" style="color: brown">@total Kr</th>
            </tr>
        </tfoot>
    </table>
    <div class="buttons">
        <a class="btn btn-primary pull-right" href='javascript:history.go(-1)'>Continue shopping</a>

        @if (SignInManager.IsSignedIn(User) && Model != null)
        {
            var userId = IdentityExtensions.GetUserId(User.Identity);
            <div hidden="hide" id="userId">@userId</div>

            <div class="btn btn-success pull-right" onclick="CreateOrder()">
                @Html.ActionLink("Create order", "Order", "Order", new { id = @userId },
                    new { onclick = "return confirm ('Are you sure you want to create an order ?')",style="text-decoration:none;color:white"})
            </div>
        }
        else if (SignInManager.IsSignedIn(User) && Model == null)
        {
            <h5 style="color: green;float: right">Your cart is empty</h5>
        }
        else
        {
            <h5 style="color: brown;margin-top: 20px">You need to login in order to proceed to payment !</h5>
        }

    </div>

</div>

@section Scripts
{
    <script>
        $(document).ready(function () {
            $(".quantity-change").change(function () {
                var stock = $(this).data("productStock");
                var quantity = $(this).val();
                if (quantity > 100) {
                    alert("Quantity cannot be more than 100!");
                    return;
                }
                if (quantity <= 0) {
                    alert("Quantity cannot be 0 !");
                    return;
                }
                if (quantity > stock) {
                    alert("We have only " + stock + " in our warehouse!");
                    return;
                }
                var productId = $(this).data("productId");
                var requestData = {
                    id: productId,
                    quantity: quantity
                };
                $.ajax({
                    url: '/ProductCart/ChangeQuantity',
                    type: 'POST',
                    data: JSON.stringify(requestData),
                    //dataType: 'json',
                    contentType: 'application/json',
                    error: function (xhr) {
                        alert('Error: ' + xhr.statusText);
                    },
                    success: function () {
                        window.setTimeout(function () { location.reload() }, 5);
                    }
                });
            });

        });
        function CreateOrder() {
            var paymentOption = document.getElementById("payment1").value;
            var shippingOption = document.getElementById("shipping1").value;
            var userId = document.getElementById("userId").innerHTML;
            console.log(paymentOption);
            console.log(shippingOption);
            console.log(userId);
            var requestedData = {
                id: userId,
                paymentOption: paymentOption,
                shippingOption: shippingOption
            };
            $.ajax({
                url: '/Order/CreateOrder',
                type: 'POST',
                data: JSON.stringify(requestedData),
                //dataType: 'json',
                contentType: 'application/json',
                error: function (xhr) {
                    alert('Error: ' + xhr.statusText);
                },
                success: function () {
                    window.setTimeout(function () { location.reload() }, 5);
                }
            });
        }

    </script>

    @*<script>
            function checkIfFishExist() {
                var cartList = @Model;
                var fishExist = false;
                for (var i = 0; i < cartList.length ; i++) {
                    if (cartList[i].Product.CategoryId == 1 || cartList[i].Product.CategoryId == 2) {
                        fishExist = true;
                    }
                }
                if (fishExist) {
                    $(".fish-exist").innerHTML = "fish exist!";
                }
            }
        </script>*@
}
<style>
    .cart-quantity {
    }

    .counting {
    }

    .product-id {
    }

    .quantity-change {
    }
</style>